@using Masonry.Extensibility;

<div class="well sidebar-nav">
  
  <ul class="nav nav-list" id="sidebar">
    
    @*<li>
      <span>
        <a href="@Url.Action("Index", "Timeline", new { area = "", uid = User.Identity.Name })" style="text-decoration: none">
          <img src="@Url.Action("PictureSmall", "Profile", new { area = "" })" alt="@User.Identity.Name" class="profile-picture-small"/>
        </a>
        <a href="@Url.Action("Index", "Timeline", new { area = "", uid = User.Identity.Name })" style="padding-left: 5px;"><strong>@User.Identity.GetDisplayName()</strong></a>
      </span>
    </li>
    <li class="divider"></li>*@
    

    <li class="nav-header">@Strings.Main</li>
    <li id="timeline_index">
      <a href="@Url.Action("Index", "Timeline", new { area = "" })">
        <i class="icon-list"></i>&nbsp;@Strings.Timeline
      </a>
    </li>
    <li id="timeline_mentions">
      <a href="@Url.Action("Mentions", "Timeline", new { area = "" })">
        <i class="icon-globe"></i>&nbsp;@Strings.Mentions
      </a>
    </li>
    <li class="disabled"><a href="#"><i class="icon-calendar"></i>&nbsp;@Strings.Archive</a></li>
    <li class="disabled"><a href="#"><i class="icon-star"></i>&nbsp;@Strings.Favorites</a></li>
    <li class="disabled"><a href="#"><i class="icon-tasks"></i>&nbsp;@Strings.Tasks</a></li>
    
    @{
      var cMain = Masonry.GetSidebarActions(SidebarCategories.Main).ToList();
      if (cMain.Count > 0)
      {
        foreach (var verb in cMain)
        {
          <li id="@verb.GetSidebarId()">
            <a href="@Url.Action(verb.Action, verb.Controller, new { area = verb.Area })">
              <i class="icon-list-alt"></i>&nbsp;@verb.Name
              @if (verb.Notifications > 0)
              {
                <span class="badge  pull-right">@verb.Notifications</span>
              }
            </a>
          </li>
        }
      }
    }
    
    <li id="search_index">
      <a href="@Url.Action("Index", "Search", new { area = "" })">
        <i class="icon-search"></i>&nbsp;@Strings.Search
      </a>
    </li>
  
    @{
      var cLists = Masonry.GetSidebarActions(SidebarCategories.Lists).ToList();
      if (cLists.Count > 0)
      {
        <li class="nav-header">@Strings.Lists</li>
        foreach (var verb in cLists)
        {
          <li id="@verb.GetSidebarId()">
            <a href="@Url.Action(verb.Action, verb.Controller, new { area = verb.Area })">
              <i class="icon-list-alt"></i>&nbsp;@verb.Name
              @if (verb.Notifications > 0)
              {
                <span class="badge  pull-right">@verb.Notifications</span>
              }
            </a>
          </li>
        }
      }
    }
    
    <li class="nav-header">@Strings.Connect</li>
    @*<li class="disabled">
      <a href="#">
        <i class="icon-envelope"></i>&nbsp;Messages
        <span class="badge badge-important pull-right">1</span>
      </a>
      
    </li>*@
    <li id="people_index">
      <a href="@Url.Action("Index", "People", new { area = "" })">
        <i class="icon-user"></i>&nbsp;@Strings.People
      </a>
    </li>
    @if (ViewBag.NavigationPath == "timeline_feed" && !string.IsNullOrWhiteSpace(ViewBag.NavigationFeed))
    {
      <li id="@ViewBag.NavigationPath">
        <a href="@Url.Action("Feed", "Timeline", new { area = "", uid = ViewBag.NavigationFeed })">
          <i class="icon-comment"></i>&nbsp;@@@ViewBag.NavigationFeed
        </a>
      </li>
    }
    @*<li class="disabled"><a href="#"><i class="icon-plus-sign"></i>&nbsp;Invite Friends</a></li>*@
    
    @{
      // 'Connect' category items (external)
      var cConnect = Masonry.GetSidebarActions(SidebarCategories.Connect).ToList();
      if (cConnect.Count > 0)
      {
        foreach (var verb in cConnect)
        {
          <li id="@verb.GetSidebarId()">
            <a href="@Url.Action(verb.Action, verb.Controller, new { area = verb.Area })">
              <i class="icon-list-alt"></i>&nbsp;@verb.Name
              @if (verb.Notifications > 0)
              {
                <span class="badge  pull-right">@verb.Notifications</span>
              }
            </a>
          </li>
        }
      }
    }
    
    @{
      // 'Applications' category
      var cApps = Masonry.GetSidebarActions(SidebarCategories.Apps).ToList();
      if (cApps.Count > 0)
      {
        <li class="nav-header">@Strings.Applications</li>
        foreach (var verb in cApps)
        {
          <li id="@verb.GetSidebarId()">
            <a href="@Url.Action(verb.Action, verb.Controller, new { area = verb.Area })">
              <i class="icon-list-alt"></i>&nbsp;@verb.Name
              @if (verb.Notifications > 0)
              {
                <span class="badge  pull-right">@verb.Notifications</span>
              }
            </a>
          </li>
        }
      }
    }
    
    <li class="divider"></li>
    <li id="help_index">
      <a href="@Url.Action("Index", "Help", new { area = "" })">
        <i class="icon-flag"></i>&nbsp;@Strings.Help
      </a>
    </li>
    
    @{
      // 'Help' category items (external)
      var cHelp = Masonry.GetSidebarActions(SidebarCategories.Help).ToList();
      if (cHelp.Count > 0)
      {
        foreach (var verb in cHelp)
        {
          <li id="@verb.GetSidebarId()">
            <a href="@Url.Action(verb.Action, verb.Controller, new { area = verb.Area })">
              <i class="icon-flag"></i>&nbsp;@verb.Name
              @if (verb.Notifications > 0)
              {
                <span class="badge  pull-right">@verb.Notifications</span>
              }
            </a>
          </li>
        }
      }
    }

  </ul>
</div>
<!--/.well -->

<script type="text/javascript">
  
  $(document).ready(function () {
    updateSidebarSelection('@ViewBag.NavigationPath');
  });
  
</script>